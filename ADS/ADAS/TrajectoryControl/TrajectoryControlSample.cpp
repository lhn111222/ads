
#include "SimOneServiceAPI.h"
#include "SimOneSensorAPI.h"
#include "SSD/SimPoint3D.h"
#include "UtilDriver.h"

#include <iostream>
#include <memory>

/**
 * 本示例展示如何使用轨迹来控制主车的运动
 * 具体如何运行等使用说明请参考API开发文档中对该示例的介绍
 */

// 数组的每一行数据定义一个轨迹点
// 该轨迹定义的每个点的距离为3m。实际使用中，每个点的距离越小，控制精度越好。
// 每个轨迹点的数据依次为：
//     从轨迹第一个点开始的相对时间，单位s
//     轨迹点的X轴坐标
//     轨迹点的Y轴坐标
//     车辆在该轨迹点的加速度，单位m/s^2，因为该轨迹的各个点速度不变，所以加速度值都为0
//     车辆在该轨迹点的朝向(Yaw), 单位弧度
//     从轨迹第一个点开始的相对距离，单位米
//     车辆在该轨迹点的速度，单位m/s
float traj_data[] = {
0.0,   -295,   -3.0,   0,  0,       0,   10,
0.3,   -292,   -3.0,   0,  0,       3,   10,
0.6,   -289,   -3.0,   0,  0,       6,   10,
0.9,   -286,   -3.0,   0,  0,       9,   10,
1.2,   -283,   -3.0,   0,  0,       12,  10,
1.5,   -280,   -3.0,   0,  0,       15,  10,
1.8,   -277,   -3.0,   0,  0,       18,  10,
2.1,   -274,   -3.0,   0,  0,       21,  10,
2.4,   -271,   -3.0,   0,  0,       24,  10,
2.7,   -268,   -3.0,   0,  0,       27,  10,
3.0,   -265,   -3.0,   0,  0,       30,  10,
3.3,   -262,   -3.0,   0,  0,       33,  10,
3.6,   -259,   -3.0,   0,  0,       36,  10,
3.9,   -256,   -3.0,   0,  0,       39,  10,
4.2,   -253,   -3.0,   0,  0,       42,  10,
4.5,   -250,   -3.0,   0,  0,       45,  10,
4.8,   -247,   -3.0,   0,  0,       48,  10,
5.1,   -244,   -3.0,   0,  0,       51,  10,
5.4,   -241,   -3.0,   0,  0,       54,  10,
5.7,   -238,   -3.0,   0,  0,       57,  10,
6.0,   -235,   -3.0,   0,  0,       60,  10,
6.3,   -232,   -3.0,   0,  0,       63,  10,
6.6,   -229,   -3.0,   0,  0,       66,  10,
6.9,   -226,   -3.0,   0,  0,       69,  10,
7.2,   -223,   -3.0,   0,  0,       72,  10,
7.5,   -220,   -3.0,   0,  0,       75,  10,
7.8,   -217,   -3.0,   0,  0,       78,  10,
8.1,   -214,   -3.0,   0,  0,       81,  10,
8.4,   -211,   -3.0,   0,  0,       84,  10,
8.7,   -208,   -3.0,   0,  0,       87,  10,
9.0,   -205,   -3.0,   0,  0,       90,  10,
9.3,   -202,   -3.0,   0,  0,       93,  10,
9.6,   -199,   -3.0,   0,  0,       96,  10,
9.9,   -196,   -3.0,   0,  0,       99,  10,
10.18, -193.8, -3.0,   0,  0,       102, 10,
10.48, -190.8, -3.0,   0,  0,       105, 10,
10.78, -187.8, -3.0,   0,  0,       108, 10,
11.08, -184.8, -3.0,   0,  0,       111, 10,
11.38, -181.8, -3.0,   0,  0,       114, 10,
11.68, -178.8, -3.0,   0,  0,       117, 10,
11.98, -175.8, -3.0,   0,  0,       120, 10,
12.28, -172.8, -3.0,   0,  0,       123, 10,
12.58, -169.8, -3.0,   0,  0,       126, 10,
12.88, -166.8, -3.0,   0,  0,       129, 10,
13.18, -163.8, -3.0,   0,  0,       132, 10,
13.48, -160.8, -3.0,   0,  0,       135, 10,
13.78, -157.8, -3.0,   0,  0,       138, 10,
14.08, -154.8, -3.0,   0,  0,       141, 10,
14.38, -151.8, -3.0,   0,  0,       144, 10,
14.68, -148.8, -3.0,   0,  0,       147, 10,
14.98, -145.8, -3.0,   0,  0,       150, 10,
15.28, -142.8, -3.0,   0,  0,       153, 10,
15.58, -139.8, -3.0,   0,  0,       156, 10,
15.88, -136.8, -3.0,   0,  0,       159, 10,
16.18, -133.8, -3.2,   0,  6.1611,  162, 10,
16.48, -130.9, -3.7,   0,  6.0724,  165, 10,
16.58, -129.9, -3.9,   0,  6.0531,  168, 10,
16.88, -127.0, -4.7,   0,  6.0251,  171, 10,
17.18, -124.1, -5.4,   0,  6.0406,  174, 10,
17.48, -121.2, -6.0,   0,  6.1005,  177, 10,
17.78, -118.2, -6.4,   0,  6.2070,  180, 10,
18.08, -115.2, -6.5,   0,  0,       183, 10,
18.38, -112.2, -6.5,   0,  0,       186, 10,
18.68, -109.2, -6.5,   0,  0,       189, 10,
18.98, -106.2, -6.5,   0,  0,       192, 10,
19.28, -103.2, -6.5,   0,  0,       195, 10,
19.58, -100.2, -6.5,   0,  0,       198, 10,
19.88, -97.2,  -6.5,   0,  0,       201, 10,
20.18, -94.2,  -6.5,   0,  0,       204, 10,
20.48, -91.2,  -6.5,   0,  0,       207, 10,
20.78, -88.2,  -6.5,   0,  0,       210, 10,
21.08, -85.2,  -6.5,   0,  0,       213, 10,
21.38, -82.2,  -6.5,   0,  0,       216, 10,
21.68, -79.2,  -6.5,   0,  0,       219, 10,
21.98, -76.2,  -6.5,   0,  0,       222, 10,
22.28, -73.2,  -6.5,   0,  0,       225, 10,
22.58, -70.2,  -6.5,   0,  0,       228, 10,
22.88, -67.2,  -6.5,   0,  0,       231, 10,
23.18, -64.2,  -6.5,   0,  0,       234, 10,
23.48, -61.2,  -6.5,   0,  0,       237, 10,
23.78, -58.2,  -6.5,   0,  0,       240, 10,
24.08, -55.2,  -6.5,   0,  0,       243, 10,
24.38, -52.2,  -6.5,   0,  0,       246, 10,
24.68, -49.2,  -6.5,   0,  0,       249, 10,
24.98, -46.2,  -6.5,   0,  0,       252, 10,
25.28, -43.2,  -6.5,   0,  0,       255, 10,
25.58, -40.2,  -6.5,   0,  0,       258, 10,
25.88, -37.2,  -6.5,   0,  0,       261, 10,
26.18, -34.2,  -6.5,   0,  0,       264, 10,
26.48, -31.2,  -6.5,   0,  0.0000,  267, 10,
26.60, -30.0,  -6.4,   0,  0.0002,  270, 10,
26.90, -27.0,  -6.4,   0,  0.0139,  273, 10,
27.20, -24.0,  -6.4,   0,  0.0176,  276, 10,
27.50, -21.0,  -6.3,   0,  6.2755,  279, 10,
27.80, -18.1,  -6.8,   0,  6.0422,  282, 10,
28.10, -15.3,  -7.9,   0,  5.8426,  285, 10,
28.40, -12.7,  -9.5,   0,  5.6740,  288, 10,
28.70, -10.5,  -11.5,  0,  5.4946,  291, 10,
29.00, -8.75,  -13.9,  0,  5.2751,  294, 10,
29.30, -7.74,  -16.7,  0,  4.9229,  297, 10,
29.60, -7.46,  -19.7,  0,  4.7469,  300, 10,
29.90, -7.45,  -22.7,  0,  4.7115,  303, 10,
30.20, -7.43,  -25.7,  0,  4.7178,  306, 10,
30.50, -7.41,  -28.7,  0,  4.7178,  309, 10,
30.80, -7.40,  -31.7,  0,  4.7178,  312, 10,
31.10, -7.38,  -34.7,  0,  4.7178,  315, 10,
31.40, -7.37,  -37.7,  0,  4.7178,  318, 10,
31.70, -7.35,  -40.7,  0,  4.7178,  321, 10,
32.00, -7.33,  -43.7,  0,  4.7178,  324, 10,
32.30, -7.32,  -46.7,  0,  4.7178,  327, 10,
32.60, -7.30,  -49.7,  0,  4.7178,  330, 10,
32.90, -7.28,  -52.7,  0,  4.7178,  333, 10,
33.20, -7.27,  -55.7,  0,  4.7178,  336, 10,
33.50, -7.25,  -58.7,  0,  4.7178,  339, 10,
33.80, -7.24,  -61.7,  0,  4.7178,  342, 10,
34.10, -7.22,  -64.7,  0,  4.7178,  345, 10,
34.40, -7.20,  -67.7,  0,  4.7178,  348, 10,
34.70, -7.19,  -70.7,  0,  4.7178,  351, 10,
35.00, -7.17,  -73.7,  0,  4.7178,  354, 10,
35.30, -7.15,  -76.7,  0,  4.7178,  357, 10,
35.60, -7.14,  -79.7,  0,  4.7178,  360, 10,
35.90, -7.12,  -82.7,  0,  4.7178,  363, 10,
36.03, -7.11,  -83.8,  0,  4.7178,  366, 10,
36.33, -7.10,  -86.8,  0,  4.7178,  369, 10,
36.63, -7.08,  -89.8,  0,  4.7178,  372, 10,
36.93, -7.07,  -92.8,  0,  4.7178,  375, 10,
37.23, -7.05,  -95.8,  0,  4.7178,  378, 10,
37.53, -7.03,  -98.8,  0,  4.7178,  381, 10,
37.83, -7.02,  -101.8, 0,  4.7178,  384, 10,
38.13, -7.00,  -104.8, 0,  4.7178,  387, 10,
38.43, -6.98,  -107.8, 0,  4.7178,  390, 10,
38.73, -6.97,  -110.8, 0,  4.7178,  393, 10,
39.03, -6.95,  -113.8, 0,  4.7178,  396, 10,
39.33, -6.94,  -116.8, 0,  4.7178,  399, 10,
39.63, -6.92,  -119.8, 0,  4.7178,  402, 10,
39.93, -6.90,  -122.8, 0,  4.7178,  405, 10,
40.23, -6.89,  -125.8, 0,  4.7178,  408, 10,
40.53, -6.87,  -128.8, 0,  4.7178,  411, 10,
40.83, -6.85,  -131.8, 0,  4.7178,  414, 10,
41.13, -6.84,  -134.8, 0,  4.7178,  417, 10,
41.43, -6.82,  -137.8, 0,  4.7178,  420, 10,
41.73, -6.81,  -140.8, 0,  4.7178,  423, 10,
42.03, -6.79,  -143.8, 0,  4.7178,  426, 10,
42.33, -6.77,  -146.8, 0,  4.7178,  429, 10,
42.63, -6.76,  -149.8, 0,  4.7178,  432, 10,
42.93, -6.74,  -152.8, 0,  4.7178,  435, 10,
43.23, -6.72,  -155.8, 0,  4.7178,  438, 10,
43.53, -6.71,  -158.8, 0,  4.7178,  441, 10,
43.83, -6.69,  -161.8, 0,  4.7178,  444, 10,
44.13, -6.68,  -164.8, 0,  4.7178,  447, 10,
44.43, -6.66,  -167.8, 0,  4.7178,  450, 10,
44.73, -6.64,  -170.8, 0,  4.7178,  453, 10,
45.03, -6.63,  -173.8, 0,  4.7178,  456, 10,
45.33, -6.61,  -176.8, 0,  4.7178,  459, 10,
45.63, -6.59,  -179.8, 0,  4.7178,  462, 10,
45.93, -6.58,  -182.8, 0,  4.7178,  465, 10,
46.03, -6.57,  -183.8, 0,  4.7178,  468, 10,
46.33, -6.56,  -186.8, 0,  4.7178,  471, 10,
46.63, -6.54,  -189.8, 0,  4.7178,  474, 10,
46.93, -6.52,  -192.8, 0,  4.7178,  477, 10,
47.23, -6.51,  -195.8, 0,  4.7178,  480, 10
};

SimOne_Data_Control_Trajectory trajArray[3];

// 将轨迹数组数据按照轨迹点个数平均划分为3条轨迹
void setupSplitedTraj()
{
    int point_num = sizeof(traj_data) / sizeof(float) / 7;
    trajArray[0].point_num = point_num / 3 + 1;
    trajArray[1].point_num = point_num / 3 + 1;
    trajArray[2].point_num = point_num - point_num / 3 * 2 + 1;
    trajArray[0].isReverse = false;
    trajArray[1].isReverse = false;
    trajArray[2].isReverse = false;
    int index1 = point_num / 3;
    int index2 = index1 * 2;
    float curTrajStartTime = 0.f;
    float curTrajStartDist = 0.f;
    int j = 0;
    for (int i = 0; i < point_num * 7; i += 7) {
        SimOne_Trajectory_Point p;

        p.posx = traj_data[i + 1];
        p.posy = traj_data[i + 2];
        p.accel = traj_data[i + 3];
        p.theta = traj_data[i + 4];
        //每一条轨迹的相对距离和相对时间都是从0开始
        p.s = traj_data[i + 5] - curTrajStartDist;
        p.relative_time = traj_data[i] - curTrajStartTime;

        p.speed = traj_data[i + 6];

        if (j <= index1) {
            trajArray[0].points[j] = p;
        }
        if (j >= index1 && j <= index2) {
            if (j == index1) {
                p.relative_time = 0.f;
                p.s = 0.f;
            }
            trajArray[1].points[j - index1] = p;
        }
        if (j >= index2) {
            if (j == index2) {
                p.relative_time = 0.f;
                p.s = 0.f;
            }
            trajArray[2].points[j - index2] = p;
        }

        if (j == index1 || j == index2) {
            curTrajStartTime = traj_data[i];
            curTrajStartDist = traj_data[i + 5];
        }

        j++;
    }
}

//Main function
//
int main()
{
    setupSplitedTraj();

    int timeout = 20;
    bool isSimOneInitialized = false;
	const char* MainVehicleId = "0";
	bool isJoinTimeLoop = false;
    SimOneAPI::InitSimOneAPI(MainVehicleId, isJoinTimeLoop);
    SimOneAPI::SetDriverName(0, "TrajCtrl");

    static const int nnn = 40;
    ESimOne_Data_Vehicle_State state[nnn];
    for (int j = 0; j < nnn; j++) {
        state[j] = (ESimOne_Data_Vehicle_State)j;
    }
    SimOneAPI::RegisterVehicleState(MainVehicleId, state, nnn);

    int nextTraj = 0;
    bool reachTraj = false;

    while (true) {
        int frame = SimOneAPI::Wait();

        if (SimOneAPI::GetCaseRunStatus() == ESimOne_Case_Status::ESimOne_Case_Status_Stop) {
            break;
        }

        std::unique_ptr<SimOne_Data_Gps> pGps = std::make_unique<SimOne_Data_Gps>();
        if (!SimOneAPI::GetGps(MainVehicleId,pGps.get())) {
            std::cout << "Fetch GPS failed" << std::endl;
        }

        if (nextTraj < 3) {
            // 当车辆到达下一条轨迹的第一个点的位置时（此处距离小于0.5米），切换到下一条轨迹
            if (std::hypot(pGps->posX - trajArray[nextTraj].points[0].posx, pGps->posY - trajArray[nextTraj].points[0].posy) < 0.5) {
                reachTraj = true;
                std::cout << "Reach traj point: " << nextTraj << std::endl;
            }
        }

        if (SimOneAPI::GetCaseRunStatus() == ESimOne_Case_Status::ESimOne_Case_Status_Running && pGps->timestamp > 0) {
            if (!isSimOneInitialized) {
                std::cout << "SimOne Initialized!" << std::endl;
                isSimOneInitialized = true;
            }

            if (reachTraj) {
                // 每条轨迹只发送一次
                SimOneAPI::SetDriveTrajectory(MainVehicleId, &trajArray[nextTraj]);
                nextTraj++;
                reachTraj = false;
            }

        }
        else {
            std::cout << "SimOne Initializing..." << std::endl;
        }

        SimOneAPI::NextFrame(frame);
    }
    return 0;
}
